# Dockerfile Modifications for Baseten Plugin

## This patch shows exactly what to add to your Dockerfile

### Location 1: After line 24 (after WORKDIR /opt/netdata.git)

ADD THESE LINES:

```dockerfile
# ===== BASETEN PLUGIN BUILD START =====
# Install dependencies for baseten plugin
RUN apt-get update && apt-get install -y \
    libcurl4-openssl-dev \
    libjson-c-dev \
    cmake \
    && rm -rf /var/lib/apt/lists/*

# Build baseten plugin
RUN cd src/collectors/baseten.plugin && \
    mkdir -p build && cd build && \
    cmake .. && \
    make && \
    mkdir -p /tmp/baseten && \
    cp baseten.plugin /tmp/baseten/
# ===== BASETEN PLUGIN BUILD END =====
```

### Location 2: After line 51 (after all the mv commands, before chmod -R o+rX /app)

ADD THIS LINE:

```dockerfile
    # ===== BASETEN: Copy plugin to final location =====
    cp /tmp/baseten/baseten.plugin /app/usr/libexec/netdata/plugins.d/ && \
    chmod 755 /app/usr/libexec/netdata/plugins.d/baseten.plugin && \
    # ===== BASETEN: End copy =====
```

### Location 3: Around line 131 (in the for loop that sets permissions)

MODIFY THE for LOOP to include baseten.plugin:

BEFORE:
```dockerfile
    for name in cgroup-network \
                local-listeners \
                apps.plugin \
                debugfs.plugin \
                freeipmi.plugin \
                go.d.plugin \
                perf.plugin \
                ndsudo \
                slabinfo.plugin \
                network-viewer.plugin \
                otel-plugin \
                systemd-journal.plugin; do
```

AFTER (add baseten.plugin to the list):
```dockerfile
    for name in cgroup-network \
                local-listeners \
                apps.plugin \
                debugfs.plugin \
                freeipmi.plugin \
                go.d.plugin \
                perf.plugin \
                ndsudo \
                slabinfo.plugin \
                network-viewer.plugin \
                otel-plugin \
                baseten.plugin \
                systemd-journal.plugin; do
```

---

## Complete Modified Dockerfile

For your convenience, here's the complete Dockerfile with all modifications:

```dockerfile
# SPDX-License-Identifier: GPL-3.0-or-later

FROM netdata/builder:v3 AS builder

ARG RELEASE_CHANNEL=nightly
ARG CFLAGS
ENV CFLAGS=$CFLAGS
ARG EXTRA_INSTALL_OPTS
ENV EXTRA_INSTALL_OPTS=$EXTRA_INSTALL_OPTS
ARG DEBUG_BUILD
ENV DEBUG_BUILD=$DEBUG_BUILD

# Copy source
COPY . /opt/netdata.git
WORKDIR /opt/netdata.git

# ===== BASETEN PLUGIN BUILD START =====
# Install dependencies for baseten plugin
RUN apt-get update && apt-get install -y \
    libcurl4-openssl-dev \
    libjson-c-dev \
    cmake \
    && rm -rf /var/lib/apt/lists/*

# Build baseten plugin
RUN cd src/collectors/baseten.plugin && \
    mkdir -p build && cd build && \
    cmake .. && \
    make && \
    mkdir -p /tmp/baseten && \
    cp baseten.plugin /tmp/baseten/
# ===== BASETEN PLUGIN BUILD END =====

# Install from source
RUN chmod +x netdata-installer.sh && \
   cp -rp /deps/* /usr/local/ && \
   /bin/echo -e "INSTALL_TYPE='oci'\nPREBUILT_ARCH='$(uname -m)'" > ./system/.install-type && \
   CFLAGS="$(packaging/docker/gen-cflags.sh)" LDFLAGS="-Wl,--gc-sections" ./netdata-installer.sh --dont-wait --dont-start-it --use-system-protobuf \
   ${EXTRA_INSTALL_OPTS} --disable-ebpf --enable-plugin-otel --install-no-prefix / "$([ "$RELEASE_CHANNEL" = stable ] && echo --stable-channel)"

# files to one directory
RUN mkdir -p /app/usr/sbin/ \
             /app/usr/share \
             /app/usr/libexec \
             /app/usr/local \
             /app/usr/lib \
             /app/var/cache \
             /app/var/lib \
             /app/etc && \
    mv /usr/share/netdata   /app/usr/share/ && \
    mv /usr/libexec/netdata /app/usr/libexec/ && \
    mv /usr/lib/netdata     /app/usr/lib/ && \
    mv /var/cache/netdata   /app/var/cache/ && \
    mv /var/lib/netdata     /app/var/lib/ && \
    mv /etc/netdata         /app/etc/ && \
    mv /usr/sbin/netdata    /app/usr/sbin/ && \
    mv /usr/sbin/netdatacli    /app/usr/sbin/ && \
    mv /usr/sbin/nd-run    /app/usr/sbin/ && \
    mv /usr/sbin/systemd-cat-native /app/usr/sbin/ && \
    mv packaging/docker/run.sh        /app/usr/sbin/ && \
    mv packaging/docker/health.sh     /app/usr/sbin/ && \
    mkdir -p /deps/etc && \
    cp -rp /deps/etc /app/usr/local/etc && \
    cp /tmp/baseten/baseten.plugin /app/usr/libexec/netdata/plugins.d/ && \
    chmod 755 /app/usr/libexec/netdata/plugins.d/baseten.plugin && \
    chmod -R o+rX /app && \
    chmod +x /app/usr/sbin/run.sh

#####################################################################
FROM netdata/base:v3 AS base

ARG BUILD_DATE
ARG BUILD_VERSION
LABEL org.opencontainers.image.authors="Netdatabot <bot@netdata.cloud>"
LABEL org.opencontainers.image.url="https://netdata.cloud"
LABEL org.opencontainers.image.documentation="https://learn.netdata.cloud"
LABEL org.opencontainers.image.source="https://github.com/netdata/netdata"
LABEL org.opencontainers.image.title="Netdata Agent"
LABEL org.opencontainers.image.description="Official Netdata Agent Docker Image"
LABEL org.opencontainers.image.vendor="Netdata Inc."
LABEL org.opencontainers.image.created=${BUILD_DATE}
LABEL org.opencontainers.image.version=${BUILD_VERSION}

ARG OFFICIAL_IMAGE=false
ENV NETDATA_OFFICIAL_IMAGE=$OFFICIAL_IMAGE

ONBUILD ENV NETDATA_OFFICIAL_IMAGE=false

ARG NETDATA_UID=201
ARG NETDATA_GID=201
ENV DOCKER_GRP=netdata
ENV DOCKER_USR=netdata
ENV NETDATA_LISTENER_PORT=19999
EXPOSE $NETDATA_LISTENER_PORT

ENV NETDATA_EXTRA_DEB_PACKAGES=""

RUN mkdir -p /opt/src /var/log/netdata && \
    ln -sf /dev/stdout /var/log/netdata/access.log && \
    ln -sf /dev/stdout /var/log/netdata/aclk.log && \
    ln -sf /dev/stdout /var/log/netdata/debug.log && \
    ln -sf /dev/stderr /var/log/netdata/error.log && \
    ln -sf /dev/stderr /var/log/netdata/daemon.log && \
    ln -sf /dev/stdout /var/log/netdata/collector.log && \
    ln -sf /dev/stdout /var/log/netdata/health.log

COPY --from=builder /app /

RUN addgroup --gid ${NETDATA_GID} --system "${DOCKER_GRP}" && \
    adduser --system --no-create-home --shell /usr/sbin/nologin --uid ${NETDATA_UID} --home /etc/netdata --group "${DOCKER_USR}" && \
    chown -R root:root \
        /etc/netdata \
        /usr/share/netdata \
        /usr/libexec/netdata && \
    chown -R netdata:root \
        /usr/lib/netdata \
        /var/cache/netdata \
        /var/lib/netdata \
        /var/log/netdata && \
    chown -R netdata:netdata /var/lib/netdata/cloud.d && \
    chmod 0700 /var/lib/netdata/cloud.d && \
    chmod 0755 /usr/libexec/netdata/plugins.d/*.plugin && \
    for name in cgroup-network \
                local-listeners \
                apps.plugin \
                debugfs.plugin \
                freeipmi.plugin \
                go.d.plugin \
                perf.plugin \
                ndsudo \
                slabinfo.plugin \
                network-viewer.plugin \
                otel-plugin \
                baseten.plugin \
                systemd-journal.plugin; do \
        [ -f "/usr/libexec/netdata/plugins.d/$name" ] && chmod 4755 "/usr/libexec/netdata/plugins.d/$name"; \
    done && \
    find /var/lib/netdata /var/cache/netdata -type d -exec chmod 0770 {} \; && \
    find /var/lib/netdata /var/cache/netdata -type f -exec chmod 0660 {} \; && \
    cp -va /etc/netdata /etc/netdata.stock

ENTRYPOINT ["/usr/sbin/run.sh"]

HEALTHCHECK --interval=60s --timeout=10s --retries=3 CMD /usr/sbin/health.sh
```

---

## How to Apply These Changes

### Method 1: Manual Editing

1. Open `/Users/anirudhr/Desktop/test/thetarho/netdata/Dockerfile`
2. Add the three sections marked above
3. Save the file

### Method 2: Copy Complete Dockerfile

Replace your entire Dockerfile with the complete version above.

### Method 3: Using Git Apply (if you saved this as a patch)

```bash
cd /Users/anirudhr/Desktop/test/thetarho/netdata
# Apply the modifications manually as git patch format requires specific formatting
```

---

## After Modifying Dockerfile

1. **Commit changes:**
```bash
git add Dockerfile
git add src/collectors/baseten.plugin/
git commit -m "Add Baseten plugin to Docker build"
```

2. **Push to trigger build:**
```bash
git push origin package
```

3. **Wait for GitHub Actions** to build and push the image

4. **Pull and test:**
```bash
docker pull ghcr.io/anirudh-r-2506/tr_netdata:latest
docker run -d -p 19999:19999 \
  -e NETDATA_BASETEN_API_KEY="your_key" \
  ghcr.io/anirudh-r-2506/tr_netdata:latest
```

---

## Verification Commands

After the Docker build completes and you run the container:

```bash
# 1. Check if plugin binary exists
docker exec <container> ls -la /usr/libexec/netdata/plugins.d/baseten.plugin

# 2. Check if plugin is running
docker exec <container> ps aux | grep baseten

# 3. Check plugin logs
docker logs <container> 2>&1 | grep BASETEN

# 4. Test the function
curl 'http://localhost:19999/api/v3/function?function=deployments&format=json'
```

---

## Expected Build Output

During the Docker build, you should see:

```
Step X: Building baseten plugin
 ---> Running in abc123...
-- The C compiler identification is GNU ...
-- Configuring done
-- Generating done
-- Build files written to: .../build
[ 25%] Building C object CMakeFiles/baseten.plugin.dir/baseten-main.c.o
[ 50%] Building C object CMakeFiles/baseten.plugin.dir/baseten-api.c.o
[ 75%] Building C object CMakeFiles/baseten.plugin.dir/baseten-function.c.o
[100%] Building C object CMakeFiles/baseten.plugin.dir/baseten-utils.c.o
[100%] Linking C executable baseten.plugin
[100%] Built target baseten.plugin
```

If you see this, the plugin compiled successfully! âœ…
